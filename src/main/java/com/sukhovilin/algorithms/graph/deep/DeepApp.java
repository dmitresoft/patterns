package com.sukhovilin.algorithms.graph.deep;

/**
 * Обход в глубину
 * Это один из наиболее распространенных методов обхода графа. Данная стратегия поиска в глубину состоит в том,
 * чтобы идти «вглубь» графа насколько это возможно, а достигнув тупика, возвращаться к ближайшей вершине, у которой есть смежные ранее не посещенные вершины.
 * <p>
 * Этот алгоритм хранит в стеке информацию о том, куда следует вернуться при достижении “тупика”.
 * <p>
 * Правила обхода в глубину:
 * <p>
 * Посетить смежную, ранее не посещенную вершину, пометить её и занести в стек.
 * Перейти на данную вершину.
 * Повторить этап 1.
 * Если выполнение пункта 1 невозможно, вернуться к предыдущей вершины и попытаться повторить правило
 * 1. Если это невозможно — вернуться к вершине до нее, и так далее, пока не найдем вершину, с которой можно продолжить обход.
 * Продолжать до тех пор, пока все вершины не окажутся в стеке.
 */
public class DeepApp {
    public static void main(String[] args) {
        Graph graph = new Graph();
        graph.addVertex('A'); //0
        graph.addVertex('B'); //1
        graph.addVertex('C'); //2
        graph.addVertex('D'); //3
        graph.addVertex('E'); //4
        graph.addVertex('F'); //5
        graph.addVertex('G'); //6

        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(0, 3);
        graph.addEdge(1, 4);
        graph.addEdge(3, 5);
        graph.addEdge(5, 6);

        System.out.println("Visits: ");
        graph.dfs();
    }
}
